// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FinanceServiceClient is the client API for FinanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FinanceServiceClient interface {
	// StartLocalAlgorithm starts an Algorithm on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the finance/config.yaml
	//   3. all bytes constituting the Algorithm YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalAlgorithm(ctx context.Context, opts ...grpc.CallOption) (FinanceService_StartLocalAlgorithmClient, error)
	// StartFromPreviousAlgorithm starts a new Algorithm based on a previous one.
	// If the previous Algorithm does not have the can-replay condition set this call will result in an error.
	StartFromPreviousAlgorithm(ctx context.Context, in *StartFromPreviousAlgorithmRequest, opts ...grpc.CallOption) (*StartAlgorithmResponse, error)
	// StartAlgorithmRequest starts a new Algorithm based on its specification.
	StartAlgorithm(ctx context.Context, in *StartAlgorithmRequest, opts ...grpc.CallOption) (*StartAlgorithmResponse, error)
	// Searches for Algorithm known to this instance
	ListAlgorithm(ctx context.Context, in *ListAlgorithmRequest, opts ...grpc.CallOption) (*ListAlgorithmResponse, error)
	// Subscribe listens to new Algorithm updates
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (FinanceService_SubscribeClient, error)
	// GetAlgorithm retrieves details of a single Algorithm
	GetAlgorithm(ctx context.Context, in *GetAlgorithmRequest, opts ...grpc.CallOption) (*GetAlgorithmResponse, error)
	// Listen listens to Algorithm updates and log output of a running Algorithm
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (FinanceService_ListenClient, error)
	// StopAlgorithm stops a currently running Algorithm
	StopAlgorithm(ctx context.Context, in *StopAlgorithmRequest, opts ...grpc.CallOption) (*StopAlgorithmResponse, error)
}

type financeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFinanceServiceClient(cc grpc.ClientConnInterface) FinanceServiceClient {
	return &financeServiceClient{cc}
}

func (c *financeServiceClient) StartLocalAlgorithm(ctx context.Context, opts ...grpc.CallOption) (FinanceService_StartLocalAlgorithmClient, error) {
	stream, err := c.cc.NewStream(ctx, &FinanceService_ServiceDesc.Streams[0], "/v1.FinanceService/StartLocalAlgorithm", opts...)
	if err != nil {
		return nil, err
	}
	x := &financeServiceStartLocalAlgorithmClient{stream}
	return x, nil
}

type FinanceService_StartLocalAlgorithmClient interface {
	Send(*StartLocalAlgorithmRequest) error
	CloseAndRecv() (*StartAlgorithmResponse, error)
	grpc.ClientStream
}

type financeServiceStartLocalAlgorithmClient struct {
	grpc.ClientStream
}

func (x *financeServiceStartLocalAlgorithmClient) Send(m *StartLocalAlgorithmRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *financeServiceStartLocalAlgorithmClient) CloseAndRecv() (*StartAlgorithmResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StartAlgorithmResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *financeServiceClient) StartFromPreviousAlgorithm(ctx context.Context, in *StartFromPreviousAlgorithmRequest, opts ...grpc.CallOption) (*StartAlgorithmResponse, error) {
	out := new(StartAlgorithmResponse)
	err := c.cc.Invoke(ctx, "/v1.FinanceService/StartFromPreviousAlgorithm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServiceClient) StartAlgorithm(ctx context.Context, in *StartAlgorithmRequest, opts ...grpc.CallOption) (*StartAlgorithmResponse, error) {
	out := new(StartAlgorithmResponse)
	err := c.cc.Invoke(ctx, "/v1.FinanceService/StartAlgorithm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServiceClient) ListAlgorithm(ctx context.Context, in *ListAlgorithmRequest, opts ...grpc.CallOption) (*ListAlgorithmResponse, error) {
	out := new(ListAlgorithmResponse)
	err := c.cc.Invoke(ctx, "/v1.FinanceService/ListAlgorithm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (FinanceService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &FinanceService_ServiceDesc.Streams[1], "/v1.FinanceService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &financeServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FinanceService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type financeServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *financeServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *financeServiceClient) GetAlgorithm(ctx context.Context, in *GetAlgorithmRequest, opts ...grpc.CallOption) (*GetAlgorithmResponse, error) {
	out := new(GetAlgorithmResponse)
	err := c.cc.Invoke(ctx, "/v1.FinanceService/GetAlgorithm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServiceClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (FinanceService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &FinanceService_ServiceDesc.Streams[2], "/v1.FinanceService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &financeServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FinanceService_ListenClient interface {
	Recv() (*ListenResponse, error)
	grpc.ClientStream
}

type financeServiceListenClient struct {
	grpc.ClientStream
}

func (x *financeServiceListenClient) Recv() (*ListenResponse, error) {
	m := new(ListenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *financeServiceClient) StopAlgorithm(ctx context.Context, in *StopAlgorithmRequest, opts ...grpc.CallOption) (*StopAlgorithmResponse, error) {
	out := new(StopAlgorithmResponse)
	err := c.cc.Invoke(ctx, "/v1.FinanceService/StopAlgorithm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FinanceServiceServer is the server API for FinanceService service.
// All implementations must embed UnimplementedFinanceServiceServer
// for forward compatibility
type FinanceServiceServer interface {
	// StartLocalAlgorithm starts an Algorithm on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the finance/config.yaml
	//   3. all bytes constituting the Algorithm YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalAlgorithm(FinanceService_StartLocalAlgorithmServer) error
	// StartFromPreviousAlgorithm starts a new Algorithm based on a previous one.
	// If the previous Algorithm does not have the can-replay condition set this call will result in an error.
	StartFromPreviousAlgorithm(context.Context, *StartFromPreviousAlgorithmRequest) (*StartAlgorithmResponse, error)
	// StartAlgorithmRequest starts a new Algorithm based on its specification.
	StartAlgorithm(context.Context, *StartAlgorithmRequest) (*StartAlgorithmResponse, error)
	// Searches for Algorithm known to this instance
	ListAlgorithm(context.Context, *ListAlgorithmRequest) (*ListAlgorithmResponse, error)
	// Subscribe listens to new Algorithm updates
	Subscribe(*SubscribeRequest, FinanceService_SubscribeServer) error
	// GetAlgorithm retrieves details of a single Algorithm
	GetAlgorithm(context.Context, *GetAlgorithmRequest) (*GetAlgorithmResponse, error)
	// Listen listens to Algorithm updates and log output of a running Algorithm
	Listen(*ListenRequest, FinanceService_ListenServer) error
	// StopAlgorithm stops a currently running Algorithm
	StopAlgorithm(context.Context, *StopAlgorithmRequest) (*StopAlgorithmResponse, error)
	mustEmbedUnimplementedFinanceServiceServer()
}

// UnimplementedFinanceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFinanceServiceServer struct {
}

func (UnimplementedFinanceServiceServer) StartLocalAlgorithm(FinanceService_StartLocalAlgorithmServer) error {
	return status.Errorf(codes.Unimplemented, "method StartLocalAlgorithm not implemented")
}
func (UnimplementedFinanceServiceServer) StartFromPreviousAlgorithm(context.Context, *StartFromPreviousAlgorithmRequest) (*StartAlgorithmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFromPreviousAlgorithm not implemented")
}
func (UnimplementedFinanceServiceServer) StartAlgorithm(context.Context, *StartAlgorithmRequest) (*StartAlgorithmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartAlgorithm not implemented")
}
func (UnimplementedFinanceServiceServer) ListAlgorithm(context.Context, *ListAlgorithmRequest) (*ListAlgorithmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAlgorithm not implemented")
}
func (UnimplementedFinanceServiceServer) Subscribe(*SubscribeRequest, FinanceService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedFinanceServiceServer) GetAlgorithm(context.Context, *GetAlgorithmRequest) (*GetAlgorithmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlgorithm not implemented")
}
func (UnimplementedFinanceServiceServer) Listen(*ListenRequest, FinanceService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedFinanceServiceServer) StopAlgorithm(context.Context, *StopAlgorithmRequest) (*StopAlgorithmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopAlgorithm not implemented")
}
func (UnimplementedFinanceServiceServer) mustEmbedUnimplementedFinanceServiceServer() {}

// UnsafeFinanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FinanceServiceServer will
// result in compilation errors.
type UnsafeFinanceServiceServer interface {
	mustEmbedUnimplementedFinanceServiceServer()
}

func RegisterFinanceServiceServer(s grpc.ServiceRegistrar, srv FinanceServiceServer) {
	s.RegisterService(&FinanceService_ServiceDesc, srv)
}

func _FinanceService_StartLocalAlgorithm_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FinanceServiceServer).StartLocalAlgorithm(&financeServiceStartLocalAlgorithmServer{stream})
}

type FinanceService_StartLocalAlgorithmServer interface {
	SendAndClose(*StartAlgorithmResponse) error
	Recv() (*StartLocalAlgorithmRequest, error)
	grpc.ServerStream
}

type financeServiceStartLocalAlgorithmServer struct {
	grpc.ServerStream
}

func (x *financeServiceStartLocalAlgorithmServer) SendAndClose(m *StartAlgorithmResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *financeServiceStartLocalAlgorithmServer) Recv() (*StartLocalAlgorithmRequest, error) {
	m := new(StartLocalAlgorithmRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FinanceService_StartFromPreviousAlgorithm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartFromPreviousAlgorithmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServiceServer).StartFromPreviousAlgorithm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FinanceService/StartFromPreviousAlgorithm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServiceServer).StartFromPreviousAlgorithm(ctx, req.(*StartFromPreviousAlgorithmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceService_StartAlgorithm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartAlgorithmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServiceServer).StartAlgorithm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FinanceService/StartAlgorithm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServiceServer).StartAlgorithm(ctx, req.(*StartAlgorithmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceService_ListAlgorithm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAlgorithmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServiceServer).ListAlgorithm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FinanceService/ListAlgorithm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServiceServer).ListAlgorithm(ctx, req.(*ListAlgorithmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FinanceServiceServer).Subscribe(m, &financeServiceSubscribeServer{stream})
}

type FinanceService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type financeServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *financeServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FinanceService_GetAlgorithm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlgorithmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServiceServer).GetAlgorithm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FinanceService/GetAlgorithm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServiceServer).GetAlgorithm(ctx, req.(*GetAlgorithmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FinanceServiceServer).Listen(m, &financeServiceListenServer{stream})
}

type FinanceService_ListenServer interface {
	Send(*ListenResponse) error
	grpc.ServerStream
}

type financeServiceListenServer struct {
	grpc.ServerStream
}

func (x *financeServiceListenServer) Send(m *ListenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FinanceService_StopAlgorithm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopAlgorithmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServiceServer).StopAlgorithm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FinanceService/StopAlgorithm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServiceServer).StopAlgorithm(ctx, req.(*StopAlgorithmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FinanceService_ServiceDesc is the grpc.ServiceDesc for FinanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FinanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.FinanceService",
	HandlerType: (*FinanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartFromPreviousAlgorithm",
			Handler:    _FinanceService_StartFromPreviousAlgorithm_Handler,
		},
		{
			MethodName: "StartAlgorithm",
			Handler:    _FinanceService_StartAlgorithm_Handler,
		},
		{
			MethodName: "ListAlgorithm",
			Handler:    _FinanceService_ListAlgorithm_Handler,
		},
		{
			MethodName: "GetAlgorithm",
			Handler:    _FinanceService_GetAlgorithm_Handler,
		},
		{
			MethodName: "StopAlgorithm",
			Handler:    _FinanceService_StopAlgorithm_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartLocalAlgorithm",
			Handler:       _FinanceService_StartLocalAlgorithm_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _FinanceService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _FinanceService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "finance.proto",
}
